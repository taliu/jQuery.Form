(function (e) { var t = { url: "", dataType: "text", type: "GET", onSubmit: function (e) { }, success: function (e) { }, onBeforeLoad: function (e) { }, onLoad: function (e) { }, onLoadError: function (e) { }, validateRules: {}, mappingRules: {} }, n = { init: function (t) { return this.each(function () { var r = e(this), i = n.getOptions.call(r); n.setOptions.call(r, t), i || r.submit(function () { event.preventDefault(); var t = n.getOptions.call(r), i = n.getFormData.call(r); t.onSubmit(i) !== !1 && (t.data = i, e.ajax(t)) }) }) }, submit: function (t) { return this.each(function () { var n = e(this); n.form(t).submit() }) }, load: function (t, r) { return r = (r || "post").toLowerCase(), this.each(function () { var i = e(this), s = n.getOptions.call(i); if (typeof t == "string") { var o = {}; if (s.onBeforeLoad(o) !== !1) { var u = t, a = r == "get" ? e.get : e.post; a(u, o, function (e) { s.onLoad && s.onLoad(e), n.setFormData.call(i, e) }, "json").error(function () { s.onLoadError("加载数据出错：数据格式要为json格式。来自：" + t) }) } } else if (typeof t == "object") { var f = e.extend({}, t); s.onBeforeLoad() !== !1 && (s.onLoad && s.onLoad(f), n.setFormData.call(i, f)) } else s.onLoadError("参数不是一个json对象或URL") }) }, clear: function (t) { return t = t || {}, this.each(function () { var n = e(this); n.find("input[type!='submit'][type!='reset'][type!='button'],textarea,select").each(function () { var n = this; switch (n.type.toLocaleLowerCase()) { case "checkbox": case "radio": if (t.hasOwnProperty(n.name)) { var r = t[n.name].split(","); r.indexOf(n.value) != -1 && (n.checked = !0) } else n.checked && (n.checked = !1); break; default: t.hasOwnProperty(n.name) ? e(n).val(t[n.name]) : e(n).val("") } }) }) }, reset: function () { return this.each(function () { this.reset() }) }, validate: function (t) { var r = !0, i = this, s = n.getOptions.call(i); return i.find("[name][validType]").each(function () { var n = e(this), i = n.attr("validType"); if (i) { var o = i.split("|"); for (var u = 0; u < o.length; u++) { var a, f = e.trim(o[u]); if (f) { var l = f.indexOf("["); if (l != -1) try { a = Function("return " + f.slice(l))(), f = f.slice(0, l) } catch (c) { e.error("验证规则有误:" + f) } if (s.validateRules.hasOwnProperty(f)) { var h = s.validateRules[f], p = h.validator(n.val(), a, n); !p && e.type(h.message) === "function" && h.message(n.val(), a, n), r = p && r } else r = !1, e.error("不存在名称为 " + f + " 的验证规则") } if (!r && !t) return !1 } } }), r }, getFormData: function () { var t = this, n = {}; return t.find("[name]").each(function () { var t = "", r, i = this; switch (i.type.toLocaleLowerCase()) { case "select-multiple": t = i.name, r = e(i).val().join(","); break; case "checkbox": case "radio": i.checked && (t = i.name, r = e(i).val()); break; default: t = i.name, r = e(i).val() } t && (n.hasOwnProperty(t) ? n[t] += "," + r : n[t] = r) }), n }, setFormData: function (t) { return this.each(function () { var n = e(this); t && n.find("[name]").each(function () { var n = this; if (t.hasOwnProperty(n.name)) { var r = t[n.name]; switch (n.type.toLocaleLowerCase()) { case "select-multiple": r && e(n).val(r.split(",")); break; case "checkbox": case "radio": var i = r ? r.split(",") : []; i.indexOf(n.value) != -1 && (n.checked = !0); break; default: e(n).val(r) } } }) }) }, setOptions: function (r) { return this.each(function () { var i = e(this), s = n.getOptions.call(i); if (s) s = e.extend(!0, {}, s, r); else { var o = e.extend({}, t, { url: i.attr("action") || location.href, type: i.attr("method") || t.type }); s = e.extend(!0, {}, o, r) } for (var u in s.mappingRules) i.find("[name='" + u + "']").attr("validtype", s.mappingRules[u]); i.data("_form_settings", s) }) }, getOptions: function () { return this.data("_form_settings") } }; e.fn.form = function (t, r) { var i = arguments[0]; if (n[i]) i = n[i], arguments = Array.prototype.slice.call(arguments, 1); else { if (typeof i == "function") return this.form({ success: i }); if (typeof i != "object" && !!i) return e.error("$.form上不存在" + i + "方法 "), this; i = n.init } return i != n.init && !n.getOptions.call(this) && n.init.call(this), i.apply(this, arguments) }, e.fn.form.defaults = t })(jQuery)